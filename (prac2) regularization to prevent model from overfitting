import tensorflow as tf  
 
# Load the data 
(train_data, train_labels), (test_data, test_labels) = tf.keras.datasets.mnist.load_data()  
 
# Preprocess the data 
train_data = train_data.reshape((60000, 784)) / 255.0 
test_data = test_data.reshape((10000, 784)) / 255.0  
train_labels = tf.keras.utils.to_categorical(train_labels) 
test_labels = tf.keras.utils.to_categorical(test_labels)  
 
# Define the model architecture
model = tf.keras.models.Sequential([ tf.keras.layers.Dense(128, activation='relu', input_shape=(784,), kernel_regularizer=tf.keras.regularizers.l2(0.01)),  tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)), tf.keras.layers.Dense(10, activation='softmax') ])  
# Compile the model 
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),                
loss='categorical_crossentropy',metrics=['accuracy']) 
 
# Train the model 
history = model.fit(train_data, train_labels,  epochs=10,batch_size=128, validation_data=(test_data, test_labels))

import tensorflow as tf 
 
# Load the data 
(train_data, train_labels), (test_data, test_labels) = tf.keras.datasets.mnist.load_data() 
# The MNIST dataset contains 70,000 images of handwritten digits that are split into 60,000 training images and 10,000 testing images. 
 
# Preprocess the data 
train_data = train_data.reshape((60000, 784)) / 255.0   # Reshape and normalize training data
test_data = test_data.reshape((10000, 784)) / 255.0     # Reshape and normalize testing data 
train_labels = tf.keras.utils.to_categorical(train_labels)   # Convert training labels to one-hot encoding 
test_labels = tf.keras.utils.to_categorical(test_labels)     # Convert testing labels to one-hot encoding 
 
# Define the model architecture 
model = tf.keras.models.Sequential([ tf.keras.layers.Dense(128, activation='relu', input_shape=(784,), kernel_regularizer=tf.keras.regularizers.l2(0.01)), tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)),tf.keras.layers.Dense(10, activation='softmax')     ])  
# Compile the model
model.compile( 
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),   # Use Adam optimizer with learning rate 0.001     
    loss='categorical_crossentropy',    # Use categorical cross-entropy loss function    
    metrics=['accuracy']    # Monitor accuracy during training 
    ) 
 
# In this case, the Adam optimizer is used with a learning rate of 0.001, categorical cross-entropy is used as the loss function and accuracy is monitored during training. 
 
# Train the model 
history = model.fit(    
     train_data,     train_labels,    
     epochs=10,     batch_size=128, 
    validation_data=(test_data, test_labels) 
) 




