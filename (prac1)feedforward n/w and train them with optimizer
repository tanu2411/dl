#Import necessary libraries 
import tensorflow as tf
import numpy as np 
from sklearn.datasets import load_iris 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import LabelBinarizer 
 
# Load Iris dataset 
iris = load_iris() 
 
# Get features and output 
X = iris.data 
y = iris.target 
 
# One-hot encode labels 
lb = LabelBinarizer() 
y = lb.fit_transform(y) 
 
# Split data into train and test sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
 
# Define model architecture 
model = tf.keras.Sequential([ 
tf.keras.layers.Dense(16, input_shape=(4,), activation='relu'), tf.keras.layers.Dense(8, activation='relu'), tf.keras.layers.Dense(3, activation='softmax')]) 
 
# Define a list of optimizers to use 
optimizers = ['sgd', 'adam', 'rmsprop'] 
 
# Loop over each optimizer and compile, train, and evaluate the model 
for optimizer in optimizers:     
  model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy']) 
  history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=0) 
  # Evaluate the model on the test set     
  loss, accuracy = model.evaluate(X_test, y_test, verbose=0)     # Print the optimizer, test loss, and test accuracy    
  print('Optimizer:', optimizer)     
  print('Test loss:', loss)      
  print('Test accuracy:', accuracy) 


